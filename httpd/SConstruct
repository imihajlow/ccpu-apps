import os.path

# Build tools
asmBuilder = Builder(action = 'asm.py -o $TARGET $SOURCE', suffix=".o", src_suffix=[".s", ".asm"], single_source=True, src_builder="C")
cBuilder = Builder(action = 'ccpu-cc -I ../../ccpu-libc/include -I ../../ccpu-libsys/include -I . -I uip/uip -o $TARGET $SOURCE', suffix=".s", src_suffix=".c", single_source=True, source_scanner=CScanner)
def linkGenerator(source, target, env, for_signature):
    return f"link.py --layout=default-stack -m {target[1]} -o {target[0]} {' '.join(str(s) for s in source)}"

def appLinkGenerator(source, target, env, for_signature):
    return f"link.py --slim --layout=../app.yaml -m {target[1]} -o {target[0]} {' '.join(str(s) for s in source)}"

def linkEmitter(target, source, env):
    t = target[0]
    base,ext = os.path.splitext(str(t))
    target.append(f"{base}.map")
    return target, source

linkBuilder = Builder(generator=linkGenerator, suffix=".bin", src_suffix=[".o", ".a"], src_builder="Asm", emitter=linkEmitter)
appLinkBuilder = Builder(generator=appLinkGenerator, suffix=".app", src_suffix=[".o", ".a"], src_builder="Asm", emitter=linkEmitter)

imageBuilder = Builder(action = './mkfat.sh data $SOURCES', suffix=".img", src_suffix=[".app", ".ext"])

env = Environment(BUILDERS = {
    'Asm' : asmBuilder,
    'C': cBuilder,
    'Bin': linkBuilder,
    'App': appLinkBuilder,
    'Image': imageBuilder}, ENV={'PATH': os.environ['PATH']})

env.PrependENVPath("PATH", "../../ccpu/tools")
env["CC_DIR"] = "../../ccpu-cc"
env["CPPPATH"] = ["../lib", "../../ccpu-libc/include", "../../ccpu-libsys/include", "uip/uip", "."]

# Libraries
bcdf = Split('''
    lib/bcdf.asm lib/bcdf_addsub.asm lib/bcdf_mul.asm lib/bcdf_div.asm lib/bcdf_print.asm
    ''')
c_runtime = ['$CC_DIR/ccpu-runtime/runtime.asm', '$CC_DIR/ccpu-runtime/divide32.asm', '$CC_DIR/ccpu-runtime/memcpy.asm']
rom_startup = ['$CC_DIR/ccpu-runtime/rom_startup.asm']
# os_startup = ['$CC_DIR/ccpu-runtime/os_startup.asm']
app_startup = ['$CC_DIR/ccpu-runtime/app_startup.asm']

libc = ['../../ccpu-libc/libc.a']
libsys = ['../../ccpu-libsys/libsys.a']
quasipixel = Split('../lib/quasipixel.c ../lib/qp_render.asm')
uip = Split('uip/uip/uip.c uip/uip/uip_arp.c uip/uip/uiplib.c uip/uip/timer.c uip/ccpu/uip_buf.asm uip/ccpu/chksum.asm')
ipcfg = Split('../lib/ipcfg.c')

# Apps
env.App('httpd', Split('main.c httpd.c') + c_runtime + app_startup + libc + libsys + uip + ipcfg)
